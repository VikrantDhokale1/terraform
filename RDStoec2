# Create VPC
resource "aws_vpc" "my_vpc1" {
  cidr_block           = "10.1.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "my-vpc1"
  }
}
# Create Internet Gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc1.id
}
# Create public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.my_vpc1.id
  cidr_block              = "10.1.1.0/24"
  availability_zone       = "eu-north-1a" # Change this to an available zone in your region
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet"
  }
}
# Create Route Table
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc1.id
}
# Attach Internet Gateway to Route Table
resource "aws_route" "route_to_igw" {
  route_table_id         = aws_route_table.public_route_table.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.my_igw.id
}

# Associate Route Table with Public Subnet
resource "aws_route_table_association" "public_subnet_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

# Create private subnet
resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.my_vpc1.id
  cidr_block        = "10.1.2.0/24"
  availability_zone = "eu-north-1b" # Change this to an available zone in your region

  tags = {
    Name = "private-subnet"
  }
}
resource "aws_eip" "nat_eip" {
  vpc = true
}

# Create NAT gateway in the public subnet
resource "aws_nat_gateway" "my_nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id

  tags = {
    Name = "my-nat-gateway"
  }
}



# Create private route table and route traffic through NAT gateway
resource "aws_route_table" "private_route_table" {
  vpc_id = aws_vpc.my_vpc1.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.my_nat_gateway.id
  }

  tags = {
    Name = "private-route-table"
  }
}

# Associate private subnet with private route table
resource "aws_route_table_association" "private_route_assoc" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.private_route_table.id
}

# Create RDS instance
resource "aws_db_instance" "my_db_instance" {
  identifier             = "mydbinstance"
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "5.7"
  instance_class         = "db.t3.micro"
  username               = "admin"
  password               = "mypassword"
  publicly_accessible    = false
  multi_az               = false
  vpc_security_group_ids = [aws_security_group.my_db_sg.id]
  db_subnet_group_name   = aws_db_subnet_group.my_db_subnet_group.name
}

# Create DB subnet group
resource "aws_db_subnet_group" "my_db_subnet_group" {
  name       = "mydbsubnetgroup"
  subnet_ids = [aws_subnet.public_subnet.id, aws_subnet.private_subnet.id]
}

# Create Security Group for RDS
resource "aws_security_group" "my_db_sg" {
  vpc_id = aws_vpc.my_vpc1.id

  # Add necessary rules for RDS traffic
   # Add necessary rules for RDS traffic
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create EC2 instance
resource "aws_instance" "my_instance" {
  ami           = "ami-07ec4220c92589b40" # Change to your desired AMI
  instance_type = "t3.micro"
  subnet_id     = aws_subnet.public_subnet.id
  key_name      = "ec2key"

  # Example UserData to configure MySQL client on EC2
  user_data = <<-EOF
              #!/bin/bash
              sudo apt-get install -y mysql
              EOF

  # Associate EC2 instance with security group
  vpc_security_group_ids = [aws_security_group.my_ec2_sg.id]
}

# Create Security Group for EC2
resource "aws_security_group" "my_ec2_sg" {
  vpc_id = aws_vpc.my_vpc1.id

  # Add necessary rules for EC2 traffic
   
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Output RDS Endpoint
output "rds_endpoint" {
  value = aws_db_instance.my_db_instance.endpoint
}
